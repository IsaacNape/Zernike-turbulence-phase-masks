function [PhaseTurb, NM] = GenerateTurb_Nape(D, ro, Base)
% written by Isaac Nape 
% generate turbulence using zernike polinomials over a circular aperture with dimensions D
% ro is the fried parameter
% Base is a data structure that has the meshgrid. It can be generated by the GenBase(...) function. 
% GenerateTurb_Nape(...) produces the phase of the turbulence screen

NollIndex=1;
%generate indexes using Noll's normal order pairing
for n=1:10
    for m=0:n
        if mod(abs(n-m), 2)==0 && n>=abs(m) && n>=0
                NM(1,NollIndex)= n;
                NM(2,NollIndex)= m;
                NollIndex=NollIndex+1;
            if m>0
                NM(1,NollIndex)= n;
                NM(2,NollIndex)= m;
                NollIndex=NollIndex+1;
            end
        end
    end
end

%disp(NM)
PhaseTurb = 0;
c=1;
%Z = zeros(length(NM))
for Zindex=NM
    Zindex(:);
    [Z]=PHmn( Zindex(1),Zindex(2),D, ro, Base, c);
    PhaseTurb = PhaseTurb + Z;
    c=c+1;
end
end

function [PhaseTurbnm, a] = PHmn(n,m,D,ro,Base,NollIndex)
%method obtained from "Turbulence effects on imaging" by MC Roggemann page 95
%flag==0->even... flag==1->odd
rNorm=double(Base.r<(D./2)) .*Base.r./(D./2);
PhaseTurbnm = zeros(size(Base.phi));
flag=mod(NollIndex,2);
if n>0 && mod((abs(m)-n), 2) == 0
    if  m>0 && flag==0 && NollIndex>1
        % even case
        a = getCoefficient(n, m, D, ro);
        Unm = sqrt(n+1).* ZernikeRadialFunc(n, m, rNorm).*cos((m) .* Base.phi);
        PhaseTurbnm =  a .* Unm;
    elseif m>0 && flag==1
        %  odd case
        a = getCoefficient(n, m, D, ro);
        Vnm = sqrt(n+1).*ZernikeRadialFunc(n, m, rNorm).*sin(m.*Base.phi);
        PhaseTurbnm  = a .* Vnm ;
    elseif m==0 && NollIndex==1
        % m=0 case
        a = getCoefficient(n, m, D, ro);
        Vnm = sqrt(n+1).*ZernikeRadialFunc(n, m, rNorm);
        PhaseTurbnm  = a .* Vnm ;
    end
else
   % disp('no piston');
end
end

function R = ZernikeRadialFunc(n, m, r)
%method obtained from "Turbulence effects on imaging" by MC Roggemann page 95
R=zeros(size(r));
s=0;
while m<=n && mod( n-m , 2 ) == 0 && s<=(n-m)/2 && n>=0 && m>=0
    A=(-1).^s * factorial(n-s);
    B= factorial(s).* factorial( (n+m)./2 -s ) .* factorial((n-m)./2 - s);
    R = R+A ./ B .* r.^(n-2.*s);
    s=s+1;
end
end

function C=getCoefficient(n,m,D,ro)
C=normrnd(0,sqrt(TurbVariencenm(n,m,D,ro)));
end

function s=TurbVariencenm(n,m,D, ro)
    s = Inm(n,m).*(D./ro).^(5./3);
end
    
function Im=Inm(n,m) 
A = 0.0072*(-1)^(n-m)*(n+1)*pi^(8/3);
B = gamma(14/3) * gamma( (2*n-5/3)/2 );
C = gamma(17./6)^2 .* gamma( n + (23./6));
Im=A*B/C;
end

